<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>Geogeographic Information System</title>
    <link rel="stylesheet" type="text/css" href="css/Earth_3D.css">
    <link rel="stylesheet" type="text/css" href="easyui/themes/default/easyui.css">     <!--easyui.css界面库-->
    <link rel="stylesheet" type="text/css" href="easyui/themes/icon.css">               <!--icon.css图标样式-->
    <link rel="stylesheet" href="http://localhost:3270/arcgis_js_v410_api/arcgis_js_api/library/4.10/dijit/themes/claro/claro.css"/>
    <link rel="stylesheet" href="http://localhost:3270/arcgis_js_v410_api/arcgis_js_api/library/4.10/esri/css/main.css"/>
    <script type="text/javascript" src="easyui/jquery.min.js"></script>
    <script type="text/javascript" src="easyui/jquery.easyui.min.js"></script>
    <script type="text/javascript" src="js/gis/jquery/basemap.js"></script>
    <script type="text/javascript" src="js/gis/jquery/gisfunction.js"></script>
    <script>
        var dojoConfig = {
            parseOnLoad: true,                                                      /*parseOnLoad 解析加载*/
            packages: [{
                name: "EarthGis",                                                   /*将localhost内容映射为EarthGis目录，调用时只需调用EarthGis*/
                location: location.pathname.replace(/\/[^/]+$/,"")+"/js/gis"        /*location 目录*/
            }]
        };
    </script>
    <script type="text/javascript" src="js/gis/data/data.js"></script>
    <script type="text/javascript" src="js/gis/echarts/ArcGISEcharts4.js"></script>
    <script src="http://localhost:3270/arcgis_js_v410_api/arcgis_js_api/library/4.10/dojo/dojo.js"></script>
</head>
<body class="easyui-layout">     <!--css样式easyui-layout-->
    <!--logo位置north，border边框，style高60像素,background: url背景图路径，padding:10px填充10像素,split分割折叠-->
    <div data-options="region:'north',border:false" style="width:100%;height: 60px;background: url('image/Li.jpg');padding:10px"></div>
    <div data-options="region:'west',split:true" title="折叠" style="width:200px">
        <div class="easyui-accordion" data-options="fit:true,border:false">
            <div id="baseLayerList" title="背景设置" style="padding: 10px">
                <form id="selectBaseMap">
                    <div style="margin-bottom:15px">
                        <!--labelPosition文本提示，after单击按钮后面，checked选中状态-->
                        <input id="baseMapEsriImage" class="easyui-radiobutton" data-options="labelPosition:'after',checked:true" name="baselayer" value="esriimage" label="ESRI影像">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--Osm(openStreetMap)公开地图-->
                        <input id="baseMapEsriOsm" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="osm" label="OSM">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--Osm(openStreetMap)公开地图-->
                        <input id="baseMapEsriTerrain" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="terrain" label="ESRI地形">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--谷歌地图-->
                        <input id="baseMapGoogleMap" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="googlemap" label="谷歌地图">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--谷歌影像-->
                        <input id="baseMapGoogleImage" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="googleimage" label="谷歌影像">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--中国蓝-->
                        <input id="baseMapEsriChinaBlue" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="chinablue" label="中国蓝">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--高德影像-->
                        <input id="baseMapGaodeMap" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="gaodemap" label="高德影像">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--百度地图-->
                        <input id="baseMapBaiduMap" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="baidumap" label="百度地图">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--百度影像-->
                        <input id="baseMapBaiduImage" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="baiduimage" label="百度影像">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--天地图-->
                        <input id="baseMapTiandituMap" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="tianditumap" label="天地图">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--天地图影像-->
                        <input id="baseMapTiandituImage" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="tiandituimage" label="天地图影像">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--腾讯地图-->
                        <input id="baseMapTengxunMap" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="tengxunmap" label="腾讯地图">
                    </div>
                    <div style="margin-bottom:15px">
                        <!--腾讯影像-->
                        <input id="baseMapTengxunImage" class="easyui-radiobutton" data-options="labelPosition:'after'" name="baselayer" value="tengxunimage" label="腾讯影像">
                    </div>
                </form>
            </div>
            <div id="layerList" title="图层管理" style="padding: 10px">
                <ul class="easyui-tree" id="featureLayerTree" data-options="animate:true,checkbox:true"></ul>
            </div>
            <div title="坐标定位" style="padding: 10px;">   <!--data-options="selected:true"-->
                <div style="margin-bottom: 5px"><input id="locLongitude" class="easyui-numberbox" data-options="label:'经度:',labelPosition:'left',min:-180.0,max:180.0,precision:8,value:86.92521924" style="width: 100%"></div>
                <div style="margin-bottom: 5px"><input id="locLatitude" class="easyui-numberbox" data-options="label:'纬度:',labelPosition:'left',min:-90.0,max:90.0,precision:8,value:27.98826869" style="width: 100%"></div>
                <div style="margin-bottom: 5px"><input id="locHeight" class="easyui-numberbox" data-options="label:'高度（米）:',labelPosition:'left',min:1.0,max:999999999.0,precision:0,value:10000" style="width: 100%"></div>
                <div style="margin-bottom: 5px"><input id="locHeading" class="easyui-numberbox" data-options="label:'方位角:',labelPosition:'left',min:0,max:360.0,precision:2,value:0" style="width: 100%"></div>
                <div style="margin-bottom: 5px"><input id="locTilt" class="easyui-numberbox" data-options="label:'俯仰角:',labelPosition:'left',min:0,max:90.0,precision:2,value:0" style="width: 100%"></div>
                <div style="margin-bottom: 5px;position:relative;left:30px"><a id="exeFastLocation" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-add'">快速定位</a></div>
                <div style="margin-bottom: 5px;position:relative;left:30px"><a id="exeFlyLocation" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-add'">飞行定位</a></div>
            </div>
            <div title="Echarts" data-options="selected:true" style="padding: 10px;">
                <div style="margin-bottom: 5px;position: relative;left: 5px"><a id="echartsMigration1" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-add'">迁徙图①</a></div>
                <div style="margin-bottom: 5px;position: relative;left: 5px"><a id="echartsMigration2" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-add'">迁徙图②</a></div>
                <div style="margin-bottom: 5px;position: relative;left: 5px"><a id="echartsMigration3" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-add'">迁徙图③</a></div>
                <div style="margin-bottom: 5px;position: relative;left: 5px"><a id="echartsMigration4" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-add'">迁徙图④</a></div>
                <div style="margin-bottom: 5px;position: relative;left: 5px"><a id="echartsScatter1" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-add'">散点图①</a></div>
                <div style="margin-bottom: 5px;position: relative;left: 5px"><a id="echartsScatter2" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-add'">散点图①</a></div>
                <div style="margin-bottom: 5px;position: relative;left: 25px"><a id="echartsClear" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-add'">清除</a></div>
            </div>
            <div title="信息查询" data-options="selected:true" style="padding: 10px;">
                <div style="margin-bottom: 20px">    <!--图层的列表-->
                    <!--easyui-combobox图层的列表-->
                    <select class="easyui-combobox" id="mapQueryLayer" name="querylayer" label="查询图层:" labelPosition="left" style="width: 100%">
                        <!--默认初始值 ‘地标点’加载过图层后会被替换掉-->
                        <option value="AL">地标点</option>
                    </select>
                </div>
                <div style="margin-bottom: 20px">
                    <!--easyui-searchbox 查询输入框，data-options框内默认显示内容-->
                    <input id="searchboxid" class="easyui-searchbox" data-options="prompt:'请输入关键字'" style="width: 100%">
                </div>
                <!--searchresults查询结果，列表显示-->
                <div id="searchresults"></div>
            </div>
        </div>
    </div>
    <div id="viewDiv" data-options="region:'center'">
        <div id="show-home" class="esri-widget--button esri-widget esri-interactive" title="全图显示">
            <span class="esri-icon-home"></span>
        </div>
        <!--状态条、style是css样式、position显示位置:absolute绝对定位、z-index多个div叠加此参数值越大显示位置越靠近表层-->
        <span id="info" style="position:absolute;right: 25px;bottom: 5px;color: #000;z-index: 50;"></span>
        <div id="topbar_1" class="topbar_1">
            <button class="action-button EarthGis-icon--measuredis" id="distanceButton" type="button" title="距离测量"></button>
            <button class="action-button EarthGis-icon--measurearea" id="areaButton" type="button" title="面积测量"></button>
            <button class="action-button EarthGis-icon--pointbuffer" id="pointBufferButton" type="button" title="点缓冲区分析"></button>
            <button class="action-button EarthGis-icon--linebuffer" id="lineBufferButton" type="button" title="线缓冲区分析"></button>
            <button class="action-button EarthGis-icon--polybuffer" id="polyBufferButton" type="button" title="面缓冲区分析"></button>
            <button class="action-button EarthGis-icon--viewshed" id="viewShedButton" type="button" title="可视域分析"></button>
            <button class="action-button EarthGis-icon--route" id="routeAnalysisButton" type="button" title="最短路径分析"></button>
            <button class="action-button EarthGis-icon--clearbuffer" id="clearBufferButton" type="button" title="清除分析结果"></button>
        </div>
        <span id="realLightToggle">
            <input type="checkbox" id="sunRealLight">太阳光照
        </span>
    </div>
    <div id="clock"></div>
    <!--菜单-->
    <div id="layerMenu" class="easyui-menu" style="width: 120px;">
        <div data-options="name:'ExtrudeBuilding'">3D渲染</div>
        <div data-options="name:'exit'">退出</div>
    </div>
    <!--缓冲区分析结果-->                                                                  <!--modal:false 非模态对话框-->
    <div id="bufferResultw" class="easyui-window" title="分析结果" data-options="modal:false,closed:true,iconCls:'icon-save'" style="width: 600px;height: 300px;padding: 10px;">
        <a href="#" class="easyui-linkbutton" onclick="javascript:$('#bufferAnalysisTable').datagrid()">Transform</a>结果
    </div>
    <!--鹰眼-->
    <div id="overviewDiv">
        <div id="extentDiv"></div>
    </div>
        <script type="text/javascript">
        var pFeaLyrs = new Array();
        var bufferDistance = 500;            <!--缓冲区默认距离-->
        require([                             <!--AMD规范-->
            "esri/Map",                       <!--管理图层-->
            "esri/views/SceneView",           <!--管理显示(显示和视图分离)-->
            "esri/widgets/Fullscreen",        <!--全屏显示-->
            "EarthGis/helper/GisHelper_01",
            "esri/layers/GraphicsLayer",
            "EarthGis/datamanager/DataLoad",
            "esri/layers/WMSLayer",
            "esri/layers/FeatureLayer",
            "EarthGis/datamanager/LayerQuery",
            "esri/views/MapView",
            "esri/core/watchUtils",
            "esri/geometry/Point",
            "esri/widgets/Expand",
            "EarthGis/datamanager/SearchTool",
            "EarthGis/render/RenderTool",
            "esri/widgets/DirectLineMeasurement3D",
            "esri/widgets/AreaMeasurement3D",
            "EarthGis/other/Clock",
            "esri/Graphic",
            "esri/geometry/geometryEngine",
            "esri/views/2d/draw/Draw",
            "esri/tasks/Geoprocessor",
            "esri/tasks/support/LinearUnit",
            "esri/tasks/support/FeatureSet",
            "esri/tasks/RouteTask",
            "esri/tasks/support/RouteParameters",
            "esri/widgets/Track",
            "EarthGis/locate/GeoLocationHelper",
            "EarthGis/locate/geolocate",
            "EarthGis/echarts/LoadEchartsLayer"
        ],function (Map,Sceneview,Fullscreen,GisHelper_01,GraphicsLayer,DataLoad,WMSLayer,
                    FeatureLayer,LayerQuery,MapView,watchUtils,Point,Expand,SearchTool,RenderTool,
                    DirectLineMeasurement3D,AreaMeasurement3D,Clock,Graphic,geometryEngine,Draw,Geoprocessor,
                    LinearUnit,FeatureSet,RouteTask,RouteParameters,Track,GeoLocationHelper,geolocate,LoadEchartsLayer) {
            var map = new Map({
                basemap: "satellite",       <!--basemap底图  satellite卫星影像-->
                ground: "world-elevation",  <!--ground高程  world-elevation全球高程-->
            });
            var view = new Sceneview({
                container: "viewDiv",    <!--container显示容器  viewDiv上述定义的盒子-->
                map: map,                <!--数据来源 new的对象 map-->
                scale: 50000000,         <!--比例尺-->
                center: [116.23,38.33],  <!--当前显示地球中心的经纬度-->
            });
            view.ui._removeComponents(["attribution"]);  <!--移除状态条-->
            view.ui.add(new Fullscreen({                 <!--Fullscreen，全屏-->
                view: view,
                element: viewDiv                          /* element元素，要素*/
            }),"bottom-left");
            view.ui.add("show-home","top-left");
            $("#show-home").click(                       <!--$ jquery语法-->
                function() {
                    GisHelper_01.locationTo(view,116.294113106,40.0408718721,2000,0,0,0.3);
                });
            //鼠标移动处理，显示状态条经纬度 event事件参数（鼠标位置点）
            view.on("pointer-move",function (event) {
                GisHelper_01.showStatusInfo(event, view);
                if(bufferEnabled){   //变量控制  当点击工具条的缓冲区功能  鼠标移动 缓冲区的设置点才会跟着移动
                    createBuffer(event,view);
                }
                if(viewShedEnabled)
                {
                    createBuffer(event,view);
                }
            });
            //初始化定位图标存放的图层
            var graphicsLocLayer = new GraphicsLayer();
            map.add(graphicsLocLayer);
            //初始化背景底层图
            initBaseMap(DataLoad,map);
            //初始化搜索
            view.ui.add(SearchTool.createSearchWidget(view),{
                position:"top-right"  //位置
            });
            //快速定位
            $("#exeFastLocation").click(
                function () {
                    startLocationTo(view,6,GisHelper_01,graphicsLocLayer);  /*graphicsLocLayer定位后用来显示图标*/
                });
            //飞行定位
            $("#exeFlyLocation").click(
                function () {
                    startLocationTo(view,0.5,GisHelper_01,graphicsLocLayer);  /*graphicsLocLayer定位后用来显示图标*/
                }
            );
            //加载WMS地图服务
            var layerWms = new WMSLayer({
                url: "https://localhost:6443/arcgis/services/Zzp/China_map3/MapServer/WMSServer",
                verson: "1.1.1"
            });
            //map.add(layerWms);
            //加入矢量图层   （绑定图层查询模板信息）
            var popupInfoTemplate = DataLoad.getBuilding();
            DataLoad.loadFeatureLayers(map,"https://localhost:6443/arcgis/rest/services/Zzp/T/FeatureServer/",3,popupInfoTemplate,pFeaLyrs);
            view.when(function(){
                ShowLayers(DataLoad,pFeaLyrs);
                var prevLocation = view.center;
                track.on("track",function () {
                    var location = track.graphic.geometry;
                    view.goTo({
                        center:location,
                        tilt:50,
                        scale:2500,
                        heading:360 - GeoLocationHelper.getHeading(location,prevLocation) //当前点和要跟踪到的下一个点 计算旋转角度
                    });
                    prevLocation = location.clone();  //当前跟踪点
                });
            });

            // var fcLayer = new FeatureLayer({
            //     url:"https://localhost:6443/arcgis/rest/services/Zzp/China_map3/FeatureServer/3",
            //     outFields:["*"],
            //     popuTemplate: popupInfoTemplate
            // });
            // map.add(fcLayer);
            //图层查询数据
            function queryFeatureLayers(value) {
                var operaLayer = parseInt($('#mapQueryLayer').combobox('getValue'));
                LayerQuery.queryFeaturelayers(value,pFeaLyrs[operaLayer],view);
            }
            $('#searchboxid').searchbox({
                width:'100%',
                height:30,
                prompt: '请输入关键字查询',
                searcher: queryFeatureLayers
            });
            //查询结果定位
            document.getElementById("searchresults").addEventListener("click",onListClickHandler);
            function onListClickHandler(event) {
                GisHelper_01.locateToFeature(event,view,document.getElementById("searchresults").graphics);
            }
            //加入图层数右键快捷菜单
            //触发菜单事件
            var operatorLayerName="建筑";
            $('#layerMenu').menu({
                onShow:function () {
                },
                onHide:function () {
                },
                onClick:function (item) {
                    if (item.text=="3D渲染")
                    {
                        if(operatorLayerName=="Mian")
                        {
                            RenderTool.extrudeBuilding(pFeaLyrs[2]);
                        }
                        else if(operatorLayerName=="Point")
                        {
                            RenderTool.point3dStyle(pFeaLyrs[1]);
                        }
                    }
                }
            });

            $('#featureLayerTree').tree({
                //为所有节点绑定右击响应事件
                onContextMenu:function (e,node) {
                    operatorLayerName=$.trim(node.text);
                    e.preventDefault();
                    $('#layerMenu').menu('show',{   //显示菜单的显示位置
                        left:event.pageX,
                        top:event.pageY
                    });
                }
            });
            //加入动态跟踪
            //初始化动态跟踪
            GeoLocationHelper.stubGeolocation(geolocate);
            var track = new Track({
               view: view,
               goToLocationEnabled:false
            });
            view.ui.add(track,"top-left");
            //加入鹰眼
            var overviewMap = new Map({
                basemap: "osm"      //基础地图  osm   (鹰眼一般不显示为卫星影像，一般都是显示为二维的矢量地图)
            });
            var mapView = new MapView({
                container:"overviewDiv",       <!--container显示在id为overviewDiv的DIV盒子中-->
                map:overviewMap,
                constraints:{
                    rotationEnabled:false      //不允许旋转鹰眼
                }
            });
            mapView.ui.components = [];   //将ui组件 赋值为空数组（状态条置为空）如果不赋值为空，地图默认有放大缩小等功能
            //在放大（平移）三维视图的事件里  同步显示鹰眼里的范围
            var extentDiv = document.getElementById("extentDiv");  //用ID(extentDiv)来获取HTML页面的元素

            mapView.when(function () {
                view.watch("extent",updateOverviewExtent);   //view对象是三维的地图
                mapView.watch("extent",updateOverviewExtent); //mapView对象是二维的地图    view和mapView地图的变化都执行updateOverviewExtent方法

                watchUtils.when(view,"stationary",updateOverview);//当三维视图view静止之后 执行updateOverview方法
            });
            function updateOverviewExtent() {
                var extent = view.extent;  // view三维地球  extent 视图范围（运行后视野范围内的内容）
                if (extent!=undefined)   //视图范围不为未定义的
                {
                    var bottomLeft = mapView.toScreen(   //toScreen  转换为屏幕坐标（像素坐标）
                        new Point({
                            //(x,y取最小值相当于左下角) （向右经度增大，向上纬度增大）
                            x:extent.xmin,  //视图范围 x 的最小值
                            y:extent.ymin,  //视图范围 y 的最小值
                            spatialReference:extent.spatialReference
                        })
                    );
                    var topRight = mapView.toScreen(
                        new Point({
                            x:extent.xmax,
                            y:extent.ymax,
                            spatialReference:extent.spatialReference
                        })
                    );

                    extentDiv.style.top = topRight.y + "px";
                    extentDiv.style.left = bottomLeft.x + "px";
                    //屏幕坐标从下往上持续减小 （地理坐标从下往上持续增大）
                    extentDiv.style.height = bottomLeft.y - topRight.y + "px";
                    extentDiv.style.width = topRight.x - bottomLeft.x + "px";
                }
            }
            function updateOverview() {
                mapView.goTo({             //mapView.goTo使得三维地球的中心和二维地球的中心一致
                    center:view.center,           //三维地球中心
                    //鹰眼视图要为三维地球视图大小的俩倍以上
                    scale: view.scale * 2 * Math.max(view.width / mapView.width,view.height / mapView.height)
                });
            }
            //鹰眼隐藏按钮
            var bgExpand = new Expand({
                view:view,
                content:document.getElementById("overviewDiv")
            });
            view.ui.add(bgExpand,"top-right");
            var activeWidget = null;  //activeWidget状态
            function setActiveWidget(type){
                switch (type) {
                    case "distance":
                        activeWidget = new DirectLineMeasurement3D({
                            view:view
                        });
                        activeWidget.viewModel.newMeasurement();

                        view.ui.add(activeWidget,"top-right");
                        setActiveButton(document.getElementById('distanceButton'));
                        break;
                    case "area":
                        activeWidget = new AreaMeasurement3D({
                            view:view
                        });
                        activeWidget.viewModel.newMeasurement();

                        view.ui.add(activeWidget,"top-right");
                        setActiveButton(document.getElementById('areaButton'));
                        break;
                    case null:
                        if(activeWidget){
                            view.ui.remove(activeWidget);
                            activeWidget.destroy();  //销毁
                            activeWidget = null;   //重新赋值为空
                        }
                        break;
                }
            }
            function setActiveButton(selectedButton){    //设置按钮为活动状态
                view.focus();  //三维地球视图 获取焦点
                var elements = document.getElementsByClassName("active");
                for (var i=0;i<elements.length;i++){
                    elements[i].classList.remove("active");
                }
                if (selectedButton){
                    selectedButton.classList.add("active");
                }
            }
            //工具条上的距离测量
            document.getElementById("distanceButton").addEventListener("click",
                function () {
                    setActiveWidget(null);//先清空上一次的状态
                    if (!this.classList.contains('active')){
                        setActiveWidget('distance');   //如果不是活动状态 设值为活动状态
                    }else{
                        setActiveButton(null);  //如果是活动状态 设值为空
                    }
                });
            //工具条上的面积测量
            document.getElementById("areaButton").addEventListener("click",
                function () {
                    setActiveWidget(null);//先清空上一次的状态
                    if (!this.classList.contains('active')){
                        setActiveWidget('area');   //如果不是活动状态 设值为活动状态
                    }else{
                        setActiveButton(null);  //如果是活动状态 设值为空
                    }
                });
            var oldEnvironment=view.environment;
            //真实光照
            $("#sunRealLight").change(function () {
                if ($('#sunRealLight').is(':checked'))
                {
                    var clock = new Clock({
                        el:"clock",
                        skin:require.toUrl("EarthGis/other/clock.svg"),
                        time:view.environment.lighting.date.getTime()
                    });
                    var environment={
                        atmosphere:{
                            quality:"high"
                        },
                        lighting:{             //光照
                            date:new Date(),
                            directShadowsEnabled:true,
                            cameraTrackingEnabled:false
                        }
                    };
                    view.environment=environment;
                    view.ui.add("clock","bottom-right");
                    clock.on("time-change",function (time) {
                        view.environment.lighting.date=time;
                    });
                }
                else
                {
                    //clock.off("time-change");
                    view.ui.remove("clock");
                    view.environment=oldEnvironment;
                }
            });
            //缓冲区分析
            var bufferEnabled = false;
            var bufferLayer = new GraphicsLayer();
            var pointLayer = new GraphicsLayer();
            map.addMany([bufferLayer,pointLayer]);
            function clearGraphics(){
                pointLayer.removeAll();
                bufferLayer.removeAll();
                graphicsViewShedLayer.removeAll();
                view.graphics.removeAll();
            }
            //点缓冲区分析
            $("#pointBufferButton").click(
                function () {
                    clearGraphics();
                    $.messager.prompt('缓冲区参数','请输入缓冲区的半径（米）:',function (r) {
                        if (r){
                            bufferEnabled = true;
                            bufferDistance = r;
                        }
                    });
                }
            );
            var pointSym = {
                type:"simple-marker",
                color:[255,0,0],
                outline:{
                    color:[255,255,255],
                    width:1
                },
                size:7
            };
            var polySym = {
                type:"simple-fill",
                color:[140,140,222,0.5],
                outline:{
                    color:[0,0,0,0.5],
                    width:2
                }
            };
            function createBuffer(event,view) {   //鼠标移动 调用createBuffer方法
                event.stopPropagation();           //停止事件的传递stopPropagation
                var point = view.toMap({
                    x:event.x,            //将屏幕坐标 event 转为地理坐标  生成一个点（鼠标所在的位置点）
                    y:event.y
                });
                if(point){           //如果生成成功
                    bufferPoint(point);  //用bufferPoint调用这个位置点
                }
            }
            function bufferPoint(point) {
                if(!bufferEnabled && !viewShedEnabled){    //判断是否是缓冲区功能状态  如果不是
                    console.log(        //控制台输出  不允许调用
                        "buffering not enabled.Hit the space bar key and click/drag to buffer."
                    );
                    return;
                }
                clearGraphics();   //清除上一次缓存结果
                point.hasZ = false;
                point.z = undefined;
                pointLayer.add(new Graphic({
                    geometry: point,
                    symbol:pointSym
                }));
                var buffer = geometryEngine.geodesicBuffer(point,bufferDistance,"meters");
                bufferLayer.add(new Graphic({
                    geometry: buffer,
                    symbol:polySym
                }));
            }
            //线缓冲区分析
            const draw = new Draw({
                view:view
            });
            $("#lineBufferButton").click(
                function () {
                    clearGraphics();   //清楚上一次的缓冲区分析内容
                    $.messager.prompt('缓冲区参数','请输入缓冲距（米）:',function (r) {   //弹出对话框
                        if(r){
                            bufferDistance=r;
                        }
                    });
                    view.graphics.removeAll();
                    const action = draw.create("polyline");
                    view.focus();
                    action.on(["vertex-add","vertex-remove","cursor-update","redo","undo"],updateVertices);
                    action.on(["draw-complete"],startLineBufferAnalysis);
                });
            function updateVertices(event){
                createGraphic(event);
            }
            function createGraphic(event){
                const vertices = event.vertices;
                view.graphics.removeAll();
                const graphic = new Graphic({
                    geometry:{
                        type:"polyline",
                        paths:vertices,
                        spatialReference:view.spatialReference
                    },
                    symbol:{
                        type:"simple-line",
                        color:[0,0,255],
                        width:1,
                        cap:"round",
                        join:"round"
                    }
                });
                view.graphics.add(graphic);
            }
            function startLineBufferAnalysis(event){
                const vertices = event.vertices;
                view.graphics.removeAll();
                const graphic = new Graphic({
                    geometry:{
                        type:"polyline",
                        paths:vertices,
                        spatialReference:view.spatialReference
                    },
                    symbol:{
                        type:"simple-line",
                        color:[255,0,0],
                        width:1,
                        cap:"round",
                        join:"round"
                    }
                });
                var operaLayer = parseInt($('#mapQueryLayer').combobox('getValue'));
                commonBufferAnalysis(graphic.geometry,bufferDistance,pFeaLyrs[operaLayer]);
                view.graphics.add(graphic);
                var buffer = geometryEngine.geodesicBuffer(graphic.geometry,bufferDistance,"meters");
                bufferLayer.add(new Graphic({
                    geometry:buffer,
                    symbol:polySym
                }));
            }
            //面缓冲区分析
            var polySym_2 = {
                type:"simple-fill",
                color:[0,0,255,0.5],
                outline:{
                    color:[255,0,0,0.5],
                    width:2
                }
            };
            $("#polyBufferButton").click(
                function () {
                    clearGraphics();
                    $.messager.prompt('缓冲区参数','请输入缓冲距（米）:',function(r) {
                        if(r){
                            bufferDistance=r;
                        }
                    });
                    view.graphics.removeAll();
                    const action = draw.create("polygon");
                    view.focus();
                    action.on(["vertex-add","vertex-remove","cursor-update","redo","undo"],updatePolyVertices);
                    action.on(["draw-complete"],startPolyBufferAnalysis);
                });
            function startPolyBufferAnalysis(event){
                const vertices = event.vertices;
                view.graphics.removeAll();
                const graphic = new Graphic({
                    geometry:{
                        type:"polygon",
                        rings:vertices,
                        spatialReference:view.spatialReference
                    },
                    symbol:polySym_2
                });
                var operaLayer = parseInt($('#mapQueryLayer').combobox('getValue'));
                commonBufferAnalysis(graphic.geometry,bufferDistance,pFeaLyrs[operaLayer]);
                view.graphics.add(graphic);
                var buffer = geometryEngine.geodesicBuffer(graphic.geometry,bufferDistance,"meters");
                bufferLayer.add(new Graphic({
                    geometry:buffer,
                    symbol:polySym
                }));
            }
            function updatePolyVertices(event){
                createPolyGraphic(event);
            }
            function createPolyGraphic(event){
                const vertices = event.vertices;
                view.graphics.removeAll();
                const graphic = new Graphic({
                    geometry:{
                        type:"polygon",
                        rings: vertices,
                        spatialReference:view.spatialReference
                    },
                    symbol:polySym_2
                });
                view.graphics.add(graphic);
            }
            //鼠标单击处理
            view.on("click",function (event) {
                if(bufferEnabled)
                {
                    var operaLayer = parseInt($('#mapQueryLayer').combobox('getValue'));
                    startPointBufferAnalysis(event.mapPoint,bufferDistance,pFeaLyrs[operaLayer]);
                }
                //开始可视域分析
                if(viewShedEnabled)
                {
                    var win = $.messager.progress({
                        title:'请稍候',
                        msg:'系统正在进行可视域分析...'
                    });
                    viewShedEnabled = false;
                    clearGraphics();
                    computeViewshed(event);
                }
            });
            function startPointBufferAnalysis(point,dis,featureLayer) {   //dis缓冲距离 point缓冲中心点  featureLayer图层
                if(point){
                    commonBufferAnalysis(point,dis,featureLayer);
                    bufferEnabled = false;
                }
            }
            function commonBufferAnalysis(geo,dis,featureLayer) {
                if(geo){
                    var buffer = geometryEngine.geodesicBuffer(geo,dis,"meters");  //geodesicBuffer生成缓冲区  meters缓冲区单位
                    var layerName = featureLayer.title;
                    var cAt = layerName.lastIndexOf("-");
                    if(cAt>0){
                        layerName = layerName.substring(cAt + 1);
                    }
                    var queryParams = featureLayer.createQuery();
                    queryParams.geometry = buffer;
                    featureLayer.queryFeatures(queryParams).then(function (results) {
                        let graphics = results.features;
                        var tableShow = document.createElement("table");
                        var headShow = document.createElement("thead");
                        var headTr = document.createElement("tr");
                        var bodyShow = document.createElement("tbody");
                        tableShow.classList.add("buffer-result-table");
                        tableShow.id="bufferAnalysisTable";
                        var i=0;
                        const fragment = document.createDocumentFragment();  //遍历查询到的所有图元
                        graphics.forEach(function (result,index) {
                            const attributes = result.attributes;
                            if (i==0)     //创建表头
                            {
                                var rowHeadTable = "";
                                $.each(attributes,function (key,value) {
                                    var headTh = document.createElement("th");
                                    headTh.setAttribute("data-options","field:'"+key+"',width:120");
                                    headTh.innerText = key;
                                    headTr.appendChild(headTh);
                                });
                                i=9;
                                headShow.appendChild(headTr);
                                tableShow.appendChild(headShow);
                            }
                            var dataTr = document.createElement("tr");
                            $.each(attributes,function (key,value) {
                                var dataTd = document.createElement("td");
                                dataTd.innerHTML = "<td>"+value+"</td>";
                                dataTr.appendChild(dataTd);
                            });
                            bodyShow.appendChild(dataTr);
                        });
                        tableShow.appendChild(bodyShow);
                        fragment.appendChild(tableShow);
                        document.getElementById("bufferResultw").innerHTML = "";
                        document.getElementById("bufferResultw").appendChild(fragment);
                        document.getElementById("bufferResultw").graphics = graphics;
                        console.log(tableShow.innerHTML);
                        $('#bufferResultw').window('open');
                        $('#bufferAnalysisTable').datagrid();
                    });
                }
            }
            //可视域分析
            var graphicsViewShedLayer = new GraphicsLayer();
            map.add(graphicsViewShedLayer);
                     // "https://sampleserver6.arcgisonline.com/arcgis/rest/services/Elevation/ESRI_Elevation_World/GPServer/Viewshed
            var gpUrl = "https://sampleserver6.arcgisonline.com/arcgis/rest/services/Elevation/ESRI_Elevation_World/GPServer/Viewshed";
            var gp = new Geoprocessor(gpUrl);      //GP服务  面试点  用来做可视域分析
            gp.outSpatialReference = {
                wkid:102100         //墨卡托投影坐标系
            };

            var viewShedEnabled = false;
            var viewShedDistance = 5000;
            $("#viewShedButton").click(
                function () {
                    $.messager.prompt('可视域分析参数','请输入可视域分析半径（米）:',function (r) {
                        if(r){
                            viewShedEnabled = true;
                            viewShedDistance = r;
                            bufferDistance = r;
                        }
                    });
                });
            var markerSymbol = {
                type:"simple-marker",
                color:[255,0,0],
                outline:{
                    color:[255,255,255],
                    width:2
                }
            };
            var fillSymbol = {
                type:"simple-fill",
                color:[255,119,40,0.75],
                outline:{
                    color:[255,255,255],
                    width:1
                }
            };
            function computeViewshed(event) {
                graphicsLocLayer.removeAll();
                var point = new Point({             //分析点 要作为参数传到服务器
                    longitude:event.mapPoint.longitude,   //经度
                    latitude:event.mapPoint.latitude    //纬度
                });
                var inputGraphic = new Graphic({
                   geometry:point,
                    symbol:markerSymbol
                });
                graphicsViewShedLayer.add(inputGraphic);
                var inputGraphicContainer = [];
                inputGraphicContainer.push(inputGraphic);
                var featureSet = new FeatureSet();
                featureSet.features = inputGraphicContainer;

                var vsDistance = new LinearUnit();
                vsDistance.distance = viewShedDistance;
                vsDistance.units = "meters";
                var params = {
                    "Input_Observation_Point":featureSet,
                    "Viewshed_Distance":vsDistance
                };
                gp.execute(params).then(drawResultData);
            }
            function drawResultData(result) {
                var resultFeatures = result.results[0].value.features;
                var viewshedGraphics = resultFeatures.map(function (feature) {
                    feature.symbol = fillSymbol;
                    return feature;
                });
                graphicsViewShedLayer.addMany(viewshedGraphics);
                $.messager.progress('close');
                view.goTo({
                    target:viewshedGraphics,
                    tilt:0
                });
            };
            //最短路径分析
            //The stops and route result will be stored in this layer
            var routeLayer = new GraphicsLayer();
            map.add(routeLayer);
            var roureEvent;
            var isRouting = false;    //系统初始化isRouting为false
            $("#routeAnalysisButton").click(  //用户点击 路径分析功能按钮 isRouting为true
                function () {
                    isRouting=true;
                    //Point the URL to a valid route service
                    var routeTask = new RouteTask({   //路径分析类
                        url:"https://localhost:6443/arcgis/rest/services/Zzp/trainest/NAServer/route"
                    });

                    //Setup the route parameters
                    var routeParams = new RouteParameters({     //路径分析参数routeParams
                        stops:new FeatureSet(),
                        outSpatialReference:{   //autocasts as new SpatilalReference()
                            wkid:3857      //墨卡托投影 输出元素
                        }
                    });

                    //Define the symbology used to display the stops
                    var stopSymbol = {
                        type:"simple-marker",
                        style:"cross",     //点击功能按钮后 鼠标 变为十字架形状（cross）
                        size:15,
                        outline:{
                            width:4
                        }
                    };

                    //Define the symbology used to display th route
                    var routeSymbol = {
                        type:"simple-line",    //autocasts as simpleLineSymbol()
                        color:[0,0,255,0.5],
                        width:5
                    };

                    //Adds a graphic when the user clicks the map ,If 2or more points exist,routh
                    routeEvent = view.on("click",addStop);

                    function addStop(event) {
                        //Adds a point at the location of the map click
                        var stop = new Graphic({
                            geometry:event.mapPoint,
                            symbol:stopSymbol
                        });
                        routeLayer.add(stop);

                        //Execute the route task if 2 or more stops are input
                        routeParams.stops.features.push(stop);
                        if (routeParams.stops.features.length >= 2){
                            routeTask.solve(routeParams).then(showRoute);
                        }
                    }
                    //Adds the solved route to the map as a graphic
                    function showRoute(data) {
                        var routeResult = data.routeResults[0].route;
                        routeResult.symbol = routeSymbol;//routeResult.symbol分析结果  设置为之前定义的routeSymbol
                        routeLayer.add(routeResult);
                    }
                });
            //清除分析数据
            $("#clearBufferButton").click(
                function () {
                    clearGraphics();//调用缓冲区分析图层
                    if(isRouting)
                    {
                        isRouting = false;
                        routeLayer.removeAll();//路径分析图层 全部移除
                        //map.remove(routeLayer);
                        routeEvent.remove();//routeEvent事件remove掉
                    }
                });
            //调用人工智能模块
            var template = {   //设置一个模板
                title: "摄像头",
                content:ShowCameraMemo
            };
            function ShowCameraMemo(target) {
                window.open("http://5aiwork.applinzi.com/a/");
                return "<a href=\"http://5aiwork.applinzi.com/a/\" target=\"_blank\">查看视频</a>";
            };
            var graphicsCameraLayer = new GraphicsLayer({popupTemplate:template});
            map.add(graphicsCameraLayer);
            GisHelper_01.createCameraPoint(116.2957907528,40.0431203303,graphicsCameraLayer);
            //装载迁徙图①
            let overlay;
            let overlay3s = [];
            let overlayType = 1;
            $("#echartsMigration1").click(
                function () {
                    overlay = LoadEchartsLayer.loadEcharts1(view,echarts);
                    overlayType=1;
                });
            //装载迁涉图②
            $("#echartsMigration2").click(
                function() {
                    overlay=LoadEchartsLayer.loadEcharts2(view,echarts);
                    overlayType=1;
                });
            //装载迁涉图③
            $("#echartsMigration3").click(
                function() {
                    overlay3s=LoadEchartsLayer.loadEcharts3(view,echarts,lineData1,lineData2);
                    overlayType=3;
                });
            //装载迁涉图④
            $("#echartsMigration4").click(
                function() {
                    overlay=LoadEchartsLayer.loadEcharts4(view,echarts);
                    overlayType=1;
                });
            //装散点图①
            $("#echartsScatter1").click(
                function() {
                    overlay=LoadEchartsLayer.loadScatter(view,echarts);
                    overlayType=1;
                });
            //装散点图②
            $("#echartsScatter2").click(
                function() {
                    overlay=LoadEchartsLayer.loadScatter2(view,echarts);
                    overlayType=1;
                });
            //清除Echarts渲染
            $("#echartsClear").click(
                function() {
                    if (overlayType==1)
                    {
                        overlay.deleteECharts();
                    }
                    else
                    {
                        for (i=0;i<overlay3s.length;i++)
                        {
                            overlay3s[i].deleteECharts();
                        }
                    }
                    overlay=null;
                    overlayType=-1;
                });
        });
    </script>
</body>
</html>
